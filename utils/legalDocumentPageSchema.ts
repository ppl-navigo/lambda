import { z } from "zod";

// Define document element types - core structural components of legal documents
const ElementType = z.enum([
    "judul",           // Document title/header
    "pembukaan",       // Opening section
    "konsideran",      // Consideration section (whereas clauses)
    "dasar_hukum",     // Legal basis section
    "pasal",           // Articles/clauses section
    "blok_tanda_tangan" // Signature block section
]);

// Schema for a single document element
const documentElementSchema = z.object({
    type: ElementType.describe("The type of document element (e.g.,     judul, pembukaan, konsideran, dasar_hukum, pasal, atau blok_tanda_tangan)"),
    title: z.string().describe("Title of the element, used for headings and subheadings"),
    content: z.string().describe("Main text content of the element, supports markdown formatting, dont use block quote (`)! "),
    items: z.array(
        z.object({
            content: z.string().describe("Text content for each item in the list (e.g., paragraphs in an article, points in a consideration)")
        })
    ).optional().describe("List of sub-items, used for paragraphs in articles, points in lists, etc"),
    closing: z.string().optional().describe("Optional closing text for the element, used for summarizing or concluding the section")
}).describe("Schema for a single content unit in the document, such as an article, paragraph, or title");

// Main schema for the legal document page generated by AI
export const legalDocumentPageSchema = z.object({
    status: z.object({
        marker: z.enum(["SOS", "MID", "EOS"]).describe("Stream status marker: Start of Stream (SOS), Middle of Stream (MID), or End of Stream (EOS)"),
        completionStatus: z.number().min(0).max(100).describe("Completion percentage for the current page/section (0-100%)"),
        isComplete: z.boolean().describe("Indicates whether the generation process for the current request is fully complete")
    }).describe("Information about the document generation process status"),
    metadata: z.object({
        title: z.string().describe("Full title of the legal document"),
        documentType: z.string().describe("Type of legal document (e.g., Cooperation Agreement, Power of Attorney, Deed of Establishment)"),
        date: z.string().describe("Creation date or date appearing on the document (free format, typically YYYY-MM-DD or textual format)"),
        parties: z.array(
            z.object({
                name: z.string().describe("Full name of the involved party"),
                position: z.string().describe("Position of the party (if relevant, e.g., Managing Director)"),
                organization: z.string().describe("Name of the organization or company represented by the party (if relevant)")
            })
        ).describe("List of parties involved in the document, used for signature blocks")
    }).describe("General data or administrative information about the document"),
    currentPage: z.object({
        elements: z.array(documentElementSchema).describe("Collection of sections forming the content of the page being generated")
    }).describe("Representation of the content for the document page or section being processed or generated")
});

// Add custom validator function for document structure
export const validateDocumentStructure = (document: any): boolean => {
    // Validate that "judul" elements only appear on cover pages
    const nonCoverPagesWithJudul = document.pages?.filter(
        (page: any) => page.pageType !== "cover" && page.elements?.some(
            (element: any) => element.type === "judul"
        )
    );

    if (nonCoverPagesWithJudul?.length > 0) {
        console.error("Document structure error: 'judul' elements found on non-cover pages");
        return false;
    }

    // Validate proper introduction format without document numbers
    const introductionPages = document.pages?.filter(
        (page: any) => page.pageType === "pembukaan"
    );

    if (introductionPages?.length > 0) {
        // Check for proper introduction format
        const hasProperFormat = introductionPages.every((page: any) => {
            // Logic to verify introduction format
            const pembukaan = page.elements?.find(
                (element: any) => element.type === "pembukaan"
            );

            return pembukaan && !pembukaan.content.includes("Nomor:");
        });

        if (!hasProperFormat) {
            console.error("Document structure error: Introduction format is incorrect");
            return false;
        }
    }

    return true;
};
